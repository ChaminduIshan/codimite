name: CI/CD Pipeline for Microservice

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx for building images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Set up Google Cloud credentials
      - name: Set up Google Cloud credentials
        uses: google-github-actions/setup-gcloud@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Set up Docker credentials for GCR
      - name: Configure Docker to use GCR
        run: | 
          gcloud auth configure-docker

      # Run linting (Assuming we use ESLint or similar for a Node.js project)
      - name: Run linting
        run: |
          npm install
          npm run lint

      # Run tests (Assuming we use Jest for testing)
      - name: Run tests
        run: |
          npm install
          npm run test

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-microservice:${{ github.sha }} .

      # Push Docker image to GCR
      - name: Push Docker image to GCR
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-microservice:${{ github.sha }}

      # Deploy to GKE using ArgoCD
      - name: Deploy to GKE using ArgoCD
        run: |
          # Set up kubectl
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

          # Trigger ArgoCD sync (Assuming the ArgoCD CLI is set up and configured)
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }}
          argocd app sync my-app --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }}

